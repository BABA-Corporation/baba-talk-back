{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "BABA-TALK-API"
  },
  "host": "localhost",
  "basePath": "/api",
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "utilisateur enregistré avec succès",
            "schema": {
              "$ref": "#/definitions/UserSaveSuccess"
            }
          },
          "500": {
            "description": "erreur lors de l'enregistrement de l'utilisateur",
            "schema": {
              "$ref":"#/definitions/UserSaveFailure"
            }
          },
          "403": {
            "description": "L'email existe déjà dans la base de donnée",
            "schema": {
              "$ref":"#/definitions/UserSaveUserAlreadyExist"
            }
          }
        }
      }
    },
    "/user/{userId}/articles": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "example": "jean-mich@baba.click"
        },
        "password": {
          "type": "string",
          "example": "P@ssword1!"
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "string",
            "example": [
              "Bitcoins",
              "Apple",
              "Android"
            ]
          }
        }
      }
    },
    "UserSaveSuccess" : {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "example": {
        "message": "utilisateur enregistré avec succès"
      }
    },
    "UserSaveFailure" : {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "example": {
        "message": "erreur lors de l'enregistrement en base de donnée",
        "erreur": "erreur ..."
      }
    },
    "UserSaveUserAlreadyExist": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "example": {
        "message": "this mail address already exist in database"
      }
    }
  }
}